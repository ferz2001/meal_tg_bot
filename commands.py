import json
import logging
import base64

from aiogram import types

from ai import ai_process_image_and_addition
from db import (add_meal, get_meals_for_today, get_daily_calories,
                get_calories_consumed, reset_daily_meals, set_daily_goal)

last_meals = {}
logging.basicConfig(level=logging.INFO)


async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –±–ª—é–¥–∞ —Å –ø–æ–¥–ø–∏—Å—å—é, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è —Å /calc.")


async def done_command(message: types.Message):
    user_id = message.from_user.id

    if user_id not in last_meals:
        await message.answer("‚ö† –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å /calc.")
        return

    meal = last_meals[user_id]
    await add_meal(user_id, meal["–Ω–∞–∑–≤–∞–Ω–∏–µ"], meal["–∫–∞–ª–æ—Ä–∏–∏"])
    del last_meals[user_id]

    consumed = await get_calories_consumed(user_id)
    remaining = (await get_daily_calories(user_id)) - consumed

    meal_text = (
        f"‚úÖ *–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫!*\n\n"
        f"üçΩ *–ù–∞–∑–≤–∞–Ω–∏–µ*: {meal['–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
        f"üî• *–ö–∞–ª–æ—Ä–∏–∏*: {meal['–∫–∞–ª–æ—Ä–∏–∏']} –∫–∫–∞–ª\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
        f"‚úÖ *–°—ä–µ–¥–µ–Ω–æ*: {consumed} –∫–∫–∞–ª\n"
        f"üîª *–û—Å—Ç–∞–ª–æ—Å—å*: {remaining} –∫–∫–∞–ª\n"
    )

    await message.answer(meal_text, parse_mode="Markdown")


async def setgoal_command(message: types.Message):
    args = message.text.split()[1:]
    if not args or not args[0].isdigit():
        await message.answer("‚ö† –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setgoal 1800")
        return
    await set_daily_goal(message.from_user.id, int(args[0]))
    await message.answer(f"üéØ –í–∞—à–∞ –Ω–æ–≤–∞—è —Ü–µ–ª—å: {args[0]} –∫–∫–∞–ª –≤ –¥–µ–Ω—å!")


async def stats_command(message: types.Message):
    user_id = message.from_user.id
    consumed = await get_calories_consumed(user_id)
    daily = await get_daily_calories(user_id)
    remaining = daily - consumed
    meals = await get_meals_for_today(user_id)
    meals_text = "\n".join([f"üçΩ {name} ‚Äî {calories} –∫–∫–∞–ª" for name, calories in meals]) if meals else "üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
    await message.answer(
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n‚úÖ –°—ä–µ–¥–µ–Ω–æ: {consumed} –∫–∫–∞–ª\nüîª –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –∫–∫–∞–ª\n\nüçΩ –°—ä–µ–¥–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞:\n{meals_text}",
        parse_mode="Markdown"
    )


async def reset_command(message: types.Message):
    await reset_daily_meals(message.from_user.id)
    await message.answer("üì≠ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ–±–Ω—É–ª–µ–Ω–∞!")


async def process_photo_and_additional(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ OpenAI."""
    if not message.caption or not message.caption.strip().lower().startswith("/calc"):
        await message.answer("–ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è —Å /calc.")
        return

    from bot import bot

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    temp_filename = "temp_image.jpg"
    await bot.download_file(file.file_path, destination=temp_filename)

    # –ö–æ–¥–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ base64
    with open(temp_filename, "rb") as f:
        base64_image = base64.b64encode(f.read()).decode("utf-8")

    additional_data = ' '.join(message.caption.split()[1:])
    ai_response = None
    try:
        ai_response = await ai_process_image_and_addition(base64_image, additional_data)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ OpenAI –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    if not ai_response:
        logging.error("‚ö† OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return

    # –ï—Å–ª–∏ –±–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in ai_response:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ.")
        return

    meal_data = json.loads(ai_response)
    last_meals[message.from_user.id] = meal_data

    meal_text = (
        f"üçΩ *–ë–ª—é–¥–æ*: {meal_data.get('–Ω–∞–∑–≤–∞–Ω–∏–µ')}\n"
        f"üçè *–í–µ—Å*: {meal_data.get('–≤–µ—Å_–≥')}\n"
        f"üî• *–ö–∞–ª–æ—Ä–∏–∏*: {meal_data.get('–∫–∞–ª–æ—Ä–∏–∏')} –∫–∫–∞–ª\n"
        f"üí™ *–ë–µ–ª–∫–∏*: {meal_data.get('–±–µ–ª–∫–∏_–≥')} –≥\n"
        f"üßà *–ñ–∏—Ä—ã*: {meal_data.get('–∂–∏—Ä—ã_–≥')} –≥\n"
        f"üçû *–£–≥–ª–µ–≤–æ–¥—ã*: {meal_data.get('—É–≥–ª–µ–≤–æ–¥—ã_–≥')} –≥\n"
        f"üí© *–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 100–≥—Ä*: {meal_data.get('–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å_–Ω–∞_100–≥')} –∫–∫–∞–ª\n"
        f"‚úÖ –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(meal_text, parse_mode="Markdown")


async def eat_command(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±–ª—é–¥–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫ –≤—Ä—É—á–Ω—É—é."""
    user_id = message.from_user.id
    args = message.text.split()

    if len(args) < 3:
        await message.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/eat '–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞' '–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å'")
        return

    meal_name = args[1].strip()
    try:
        calories = int(args[2].strip())
    except ValueError:
        await message.answer("‚ö† –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_meal(user_id, meal_name, calories)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    consumed = await get_calories_consumed(user_id)
    remaining = (await get_daily_calories(user_id)) - consumed

    meal_text = (
        f"‚úÖ *–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!*\n\n"
        f"üçΩ *–ù–∞–∑–≤–∞–Ω–∏–µ*: {meal_name}\n"
        f"üî• *–ö–∞–ª–æ—Ä–∏–∏*: {calories} –∫–∫–∞–ª\n\n"
        f"üìä *–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚úÖ *–°—ä–µ–¥–µ–Ω–æ*: {consumed} –∫–∫–∞–ª\n"
        f"üîª *–û—Å—Ç–∞–ª–æ—Å—å*: {remaining} –∫–∫–∞–ª\n"
    )

    await message.answer(meal_text, parse_mode="Markdown")
