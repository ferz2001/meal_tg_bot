import logging
import base64
import os
import json
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import BotCommand
from aiogram.filters import Command
from dotenv import load_dotenv
from openai import OpenAI
from db import (create_db, add_meal, get_meals_for_today, get_daily_calories,
                get_calories_consumed, reset_daily_meals, set_daily_goal)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI API
client = OpenAI(api_key=OPENAI_API_KEY)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
last_meals = {}


@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –±–ª—é–¥–∞ —Å –ø–æ–¥–ø–∏—Å—å—é, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è —Å /calc.")


@dp.message(Command("setgoal"))
async def setgoal_command(message: types.Message):
    args = message.text.split()[1:]
    if not args or not args[0].isdigit():
        await message.answer("‚ö† –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setgoal 1800")
        return
    await set_daily_goal(message.from_user.id, int(args[0]))
    await message.answer(f"üéØ –í–∞—à–∞ –Ω–æ–≤–∞—è —Ü–µ–ª—å: {args[0]} –∫–∫–∞–ª –≤ –¥–µ–Ω—å!")


@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    user_id = message.from_user.id
    consumed = await get_calories_consumed(user_id)
    daily = await get_daily_calories(user_id)
    remaining = daily - consumed
    meals = await get_meals_for_today(user_id)
    meals_text = "\n".join([f"üçΩ {name} ‚Äî {calories} –∫–∫–∞–ª" for name, calories in meals]) if meals else "üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
    await message.answer(
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n‚úÖ –°—ä–µ–¥–µ–Ω–æ: {consumed} –∫–∫–∞–ª\nüîª –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –∫–∫–∞–ª\n\nüçΩ –°—ä–µ–¥–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞:\n{meals_text}",
        parse_mode="Markdown"
    )


@dp.message(Command("reset"))
async def reset_command(message: types.Message):
    await reset_daily_meals(message.from_user.id)
    await message.answer("üì≠ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ–±–Ω—É–ª–µ–Ω–∞!")


@dp.message(Command("done"))
async def done_command(message: types.Message):
    user_id = message.from_user.id

    if user_id not in last_meals:
        await message.answer("‚ö† –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å /calc.")
        return

    meal = last_meals[user_id]
    await add_meal(user_id, meal["–Ω–∞–∑–≤–∞–Ω–∏–µ"], meal["–∫–∞–ª–æ—Ä–∏–∏"])
    del last_meals[user_id]

    consumed = await get_calories_consumed(user_id)
    remaining = (await get_daily_calories(user_id)) - consumed

    meal_text = (
        f"‚úÖ *–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫!*\n\n"
        f"üçΩ *–ù–∞–∑–≤–∞–Ω–∏–µ*: {meal['–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
        f"üî• *–ö–∞–ª–æ—Ä–∏–∏*: {meal['–∫–∞–ª–æ—Ä–∏–∏']} –∫–∫–∞–ª\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
        f"‚úÖ *–°—ä–µ–¥–µ–Ω–æ*: {consumed} –∫–∫–∞–ª\n"
        f"üîª *–û—Å—Ç–∞–ª–æ—Å—å*: {remaining} –∫–∫–∞–ª\n"
    )

    await message.answer(meal_text, parse_mode="Markdown")


@dp.message(F.photo)
async def process_photo(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ OpenAI."""
    if not message.caption or not message.caption.strip().lower().startswith("/calc"):
        await message.answer("–ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è —Å /calc.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    temp_filename = "temp_image.jpg"
    await bot.download_file(file.file_path, destination=temp_filename)

    # –ö–æ–¥–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ base64
    with open(temp_filename, "rb") as f:
        base64_image = base64.b64encode(f.read()).decode("utf-8")

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é –±–ª—é–¥. "
                        "–ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –±–ª—é–¥–æ, –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                        "{\n"
                        "  \"–Ω–∞–∑–≤–∞–Ω–∏–µ\": \"string\",\n"
                        "  \"–≤–µ—Å_–≥\": 150,\n"
                        "  \"–∫–∞–ª–æ—Ä–∏–∏\": 52,\n"
                        "  \"–±–µ–ª–∫–∏_–≥\": 0.3,\n"
                        "  \"–∂–∏—Ä—ã_–≥\": 0.2,\n"
                        "  \"—É–≥–ª–µ–≤–æ–¥—ã_–≥\": 14\n"
                        "}\n"
                        "–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ markdown. "
                        "–ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç –±–ª—é–¥–∞, –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ:\n"
                        "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                    )
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "–û–ø—Ä–µ–¥–µ–ª–∏, –µ—Å—Ç—å –ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –±–ª—é–¥–æ. –ï—Å–ª–∏ –¥–∞ ‚Äî –≤–µ—Ä–Ω–∏ JSON, –∏–Ω–∞—á–µ ‚Äî '–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'."
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}"
                            }
                        }
                    ],
                }
            ],
        )
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        answer_content = response.choices[0].message.content.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ OpenAI –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        if not answer_content:
            logging.error("‚ö† OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            return

        print(f"üîç –û—Ç–≤–µ—Ç OpenAI: {answer_content}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

        # –ï—Å–ª–∏ –±–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in answer_content:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–º—è—Ç—å
        meal_data = json.loads(answer_content)
        last_meals[message.from_user.id] = meal_data

        meal_text = (
            f"üçΩ *–ë–ª—é–¥–æ*: {meal_data.get('–Ω–∞–∑–≤–∞–Ω–∏–µ')}\n"
            f"üî• *–ö–∞–ª–æ—Ä–∏–∏*: {meal_data.get('–∫–∞–ª–æ—Ä–∏–∏')} –∫–∫–∞–ª\n"
            f"üí™ *–ë–µ–ª–∫–∏*: {meal_data.get('–±–µ–ª–∫–∏_–≥')} –≥\n"
            f"üßà *–ñ–∏—Ä—ã*: {meal_data.get('–∂–∏—Ä—ã_–≥')} –≥\n"
            f"üçû *–£–≥–ª–µ–≤–æ–¥—ã*: {meal_data.get('—É–≥–ª–µ–≤–æ–¥—ã_–≥')} –≥\n\n"
            f"‚úÖ –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(meal_text, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    await create_db()
    await bot.set_my_commands(commands=[
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="calc", description="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ"),
        BotCommand(command="done", description="–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –±–ª—é–¥–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫"),
        BotCommand(command="stats", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å"),
        BotCommand(command="reset", description="–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å"),
        BotCommand(command="setgoal", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π (/setgoal 2000)")
    ])

    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
